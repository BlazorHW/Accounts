@page "/upsertMakejournal/{id:int}"

@inject MakeJournalServecs _makeJournalServecs

@inject AccountSereves _accountServces
@inject CostCenterServecs _costCenterServecs


<h3>UpsertMakejournal</h3>
<br />
<MudContainer Class="pa-4 mr-8">
    <EditForm Model="@_makeJournalBody" OnValidSubmit="@Upsert">
        <DataAnnotationsValidator />
        @* حقول راس القيد *@
        <MudGrid>
            <MudItem xs="3">
                <MudDatePicker @bind-Value="_makeJournalHead.date" Label="التاريخ" Editable="true" @bind-Date="date" Placeholder="Select Date" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="_makeJournalHead.Description" T="string" Label="ملاحظات" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="_makeJournalHead.Id" T="int" Label="رقم القيد" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="false"></MudTextField>
            </MudItem>
        </MudGrid>
        <br />

        @* حقول جسم القيد *@
        <MudGrid>
            <MudItem xs="3">
                <MudSelect T="int" @bind-Value="_makeJournalBody.AccountID" Label="الحساب">
                    <MudSelectItem T="int" Value="0">...</MudSelectItem>
                    @if (accounts != null)
                    {
                        @foreach (Account item in accounts)
                        {
                            <MudSelectItem T="int" Value="item.Id">@item.NameAccount</MudSelectItem>
                        }
                    }

                </MudSelect>
            </MudItem>
            <MudItem xs="5">
                <MudTextField @bind-Value="_makeJournalBody.Details" T="string" Label="البيان" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="2">
                <MudTextField @bind-Value="_makeJournalBody.Debit" T="decimal?" Label="مدين" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="2">
                <MudTextField @bind-Value="_makeJournalBody.Credit" T="decimal?" Label="دائن" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="3">

                <MudSelect Dense="true" T="int" @bind-Value="_makeJournalBody.CostCenterID" Label="مركز التكلفة" Variant="Variant.Outlined" Clearable>
                    <MudSelectItem T="int" Value="0">...</MudSelectItem>
                    @if (costCenters != null)
                    {
                        @foreach (CostCenter item in costCenters)
                        {
                            <MudSelectItem T="int" Value="item.Id">@item.NameCostCenter</MudSelectItem>
                        }
                    }

                </MudSelect>
            </MudItem>
            @*زر اضافة قبل الحفظ في قاعدة البيانات *@
            <MudItem xs="3">
                <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="AddAccount"/>
            </MudItem>
        </MudGrid>

        @* جدول عرض بيانات *@
        
            <MudTable Items="@" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<MakeJournalBody,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">accounts</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>ت</MudTh>
                    <MudTh>الحساب</MudTh>
                    <MudTh>البيان</MudTh>
                    <MudTh>مدين</MudTh>
                    <MudTh>دائن</MudTh>
                    <MudTh>مركز التكلفة</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
            <RowTemplate Context="MakeJournal">
                <MudTd DataLabel="ت">@(_makeJournalBody.MakeJournalHeadsIcoll.ToList().IndexOf(MakeJournal) + 1)</MudTd>
                <MudTd DataLabel="الحساب">@MakeJournal.Accounts.NameAccount</MudTd>
                    <MudTd DataLabel="البيان">@MakeJournal.Details</MudTd>
                    <MudTd DataLabel="مدين">@MakeJournal.Debit</MudTd>
                    <MudTd DataLabel="دائن">@MakeJournal.Credit</MudTd>
                    <MudTd DataLabel="مركز التكلفة">@MakeJournal.costCenters.NumberCostCenter</MudTd>
                        <MudTd>
                        <MudIconButton Size="Size.Small" Color="Color.Info" Icon="@Icons.Material.Filled.Edit" OnClick="()=>Edit(MakeJournal)" />
                        <MudIconButton Size="Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="()=>Delete(MakeJournal)" />
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            
            <div class="d-flex flex-wrap mt-4">
                <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
                <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
                <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
                <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
                <MudSpacer />
                <div style="min-width:200px;">
                    <MudText Inline="true" Class="align-self-center">Selected1: @selectedItem1?.Details</MudText>
                </div>
            </div>

            <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary" Class="ml-auto">حفظ</MudButton>

        </EditForm>
    </MudContainer>
    @code {
    [Parameter]
    public int id { get; set; }
    public string TextValue { get; set; }
    bool IsDisabled = false, loading = true;
    DateTime? date = DateTime.Today;
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private MakeJournalBody selectedItem1 = null;
    private HashSet<MakeJournalBody> selectedItems = new HashSet<MakeJournalBody>();

    MakeJournalBody _makeJournalBody = new();
    Account _accounts = new();
    IEnumerable<Account>? accounts;
    IEnumerable<CostCenter>? costCenters;
    MakeJournalHead _makeJournalHead = new();
    

    protected override async Task OnInitializedAsync()
    {
        accounts = await _accountServces.GetAllAccounts();
        costCenters = await _costCenterServecs.GetAllCostCenter();
        if (id != 0)
        {
            _makeJournalBody = await _makeJournalServecs.GetMakeJournalBodyByIdAsync(id);
        }

    }

    private bool FilterFunc1(MakeJournalBody element) => FilterFunc(element, searchString1);

    private bool FilterFunc(MakeJournalBody element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Details.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    void AddAccount()
    {
        _makeJournalHead.accounts = accounts.First(x => x.Id == _makeJournalHead.AccountID);
        _makeJournalBody.MakeJournalHeadsIcoll.Add(_makeJournalHead);
        _makeJournalHead = new();
    }

    async void Upsert()
    {
        ResponseViewModel response;
        if (id == 0) response = await _makeJournalServecs.AddMakeJournalBody(_makeJournalBody);
        else response = await _makeJournalServecs.EditMakeJournalBody(id, _makeJournalBody);
        if (response.State)
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
            _snackbar.Add(response.Message, Severity.Success);
            _navigation.NavigateTo("/makejournal");
        }
        else
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
            _snackbar.Add(response.Message, Severity.Error);
        }

    }
    void Delete(MakeJournalHead body)
    {
        _makeJournalBody.MakeJournalHeadsIcoll.Remove(body);
    }
    void Edit(MakeJournalBody body)
    {
        _makeJournalBody = body;
    }
}

